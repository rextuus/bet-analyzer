<?php
declare(strict_types=1);

use App\Entity\BetRowCombination;
use App\Entity\PlacedBet;
use App\Entity\SimpleBetRow;
use App\Entity\SpmFixture;
use App\Service\Sportmonks\Content\Fixture\SpmFixtureService;
use App\Service\Statistic\BetRowCombinationStatisticService;
use App\Service\Statistic\Content\BetRowCombination\BetRowCombinationService;
use PHPUnit\Framework\MockObject\MockObject;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

/**
 * @author Wolfgang Hinzmann <wolfgang.hinzmann@doccheck.com>
 * @license 2023 DocCheck Community GmbH
 */
class BetRowCombinationStatisticServiceTest extends KernelTestCase
{
    /**
     * @var MockObject|BetRowCombinationStatisticService
     */
    private BetRowCombinationService|MockObject $betRowCombinationServiceMock;
    private BetRowCombinationStatisticService $service;
    /**
     * @var (SpmFixtureService&MockObject)|MockObject
     */
    private MockObject|SpmFixtureService $fixtureServiceMock;

    private $fixtureApiIdToTimestampMap = [];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->betRowCombinationServiceMock = $this->getMockBuilder(BetRowCombinationService::class)
            ->disableOriginalConstructor()->getMock();

        $this->fixtureServiceMock = $this->getMockBuilder(SpmFixtureService::class)
            ->disableOriginalConstructor()->getMock();

        $this->service = new BetRowCombinationStatisticService($this->betRowCombinationServiceMock, $this->fixtureServiceMock);
    }

    public function testChangeProductPrice(): void
    {
        $combination = new BetRowCombination();
        $this->setBetRows($combination);

        $this->betRowCombinationServiceMock->method('getActiveCombination')->willReturn($combination);
        $this->fixtureServiceMock->method('findByApiId')->willReturnCallback(function (int $apiId){
            $fixture = new SpmFixture();
            $fixture->setApiId($apiId);
            $fixture->setStartingAt($this->fixtureApiIdToTimestampMap[$apiId]);
            return $fixture;
        });

        $this->service->getBetRowCombinationStatistic(true);
    }

    private function getRandomDateTime(DateTime $startDateTime, DateTime $endDateTime): DateTime
    {
        $startTimestamp = $startDateTime->getTimestamp();
        $endTimestamp = $endDateTime->getTimestamp();

        $randomTimestamp = rand($startTimestamp, $endTimestamp);

        $randomDateTime = new DateTime();
        $randomDateTime->setTimestamp($randomTimestamp);

        return $randomDateTime;
    }


    private function setBetRows(BetRowCombination $combination): void
    {
        $doubles = [];
        for ($betRowNr = 0; $betRowNr < 5; $betRowNr++) {
            $betRow = new SimpleBetRow();

            for ($placedBetNr = 0; $placedBetNr < 10; $placedBetNr++) {
                $bet = $this->getPlacedBet();
                if ((bool)random_int(0, 1)){
                    $doubles[] = $bet;
                }
                $betRow->addPlacedBet($bet);
                $this->fixtureApiIdToTimestampMap[$bet->getFixtureApiId()] = $this->getRandomDateTime(new DateTime('2022-05-01'), new DateTime('2023-06-01'));
            }
            $combination->addBetRow($betRow);
        }

        // now lets create a row with only doubles in it
        $betRow = new SimpleBetRow();
        foreach ($doubles as $double){
            $betRow->addPlacedBet($double);
        }

        $combination->addBetRow($betRow);
    }

    private function getPlacedBet(): PlacedBet
    {
        $placedBet = new PlacedBet();

        $wager = 1.0;
        $odd = rand(10, 50)/ 10.0;
        $won = (bool)random_int(0, 1);

        $placedBet->setWager($wager);
        $placedBet->setWon($won);
        $placedBet->setOdd($odd);

        $output = 0;
        if ($won) {
            $totalWin = $wager * $odd;
            $tax = 0.0;
            if (true) {
                $tax = $totalWin * 0.05;
            }
            $output = $totalWin - $tax;
        }

        $placedBet->setOutput($output);
        $placedBet->setFixtureApiId(random_int(1, 30));

        return $placedBet;
    }
}
