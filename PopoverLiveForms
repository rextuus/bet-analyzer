1. install composer require symfony/ux-live-component
2. check if in composer.json "@symfony/ux-live-component": "file:vendor/symfony/ux-live-component/assets" is set
3. npm install
4. use this in app.js and remove bootstrap.js from it:
import { startStimulusApp } from '@symfony/stimulus-bridge';
export const app = startStimulusApp(require.context(
   '@symfony/stimulus-bridge/lazy-controller-loader!./controllers/app',
   true,
   /\.(j|t)sx?$/
));

5. create assets/controllers/app dir

add modal-confirm_controller.js:
import {Controller} from '@hotwired/stimulus';
import {Modal} from 'bootstrap';

export default class extends Controller {
    static targets = ['modal'];
    static values = {
        url: String,
        isAjax: Boolean
    }
    modal = null;

    async openModal(event) {
        event.preventDefault()
        this.modal = new Modal(this.modalTarget);
        this.modal.show();
    }

    submit(event) {
        if (this.isAjaxValue) {
            fetch(this.urlValue, {
                method: 'GET',
                headers: {'X-Requested-With': 'XMLHttpRequest'}
            })
                .then(response => response.text())
                .then(json => {
                    window.location.reload();
                })
                .catch(error => {
                    console.log(error);
                });
        } else {
            window.location.href = this.urlValue;
        }
    }
}

add modal-form_controller.js:
import {Controller} from '@hotwired/stimulus';
import {Modal} from 'bootstrap';

export default class extends Controller {
    static targets = ['modal', 'modalBody'];
    static values = {
        formUrl: String,
    }
    modal = null;

    async openModal(event) {
        event.preventDefault()
        this.modalBodyTarget.innerHTML = 'Loading...';
        this.modal = new Modal(this.modalTarget);
        this.modal.show();

        this.loadFromUrl(this.formUrlValue)
    }

    async loadFromUrl(url) {
        fetch(url, {
            method: 'GET',
            headers: {'X-Requested-With': 'XMLHttpRequest'}
        })
            .then(response => response.text())
            .then(html => {
                this.modalBodyTarget.innerHTML = html;
            })
            .catch(error => {
                console.log(error);
            });
    }

    async submit(event) {
        event.preventDefault();
        const form = this.modalBodyTarget.getElementsByTagName('form')[0];

        const response = await fetch(form.action, {
            method: 'post',
            headers: {'X-Requested-With': 'XMLHttpRequest'},
            body: new FormData(form)
        });

        if (!response.ok) {
            this.modalBodyTarget.innerHTML = await response.text();
        } else {
            if (response.headers.has('x-redirect-uri')) {
                this.loadFromUrl(response.headers.get('x-redirect-uri'));
            } else {
                //close form modal
                this.modal.hide();
                window.location.reload();
            }
        }
    }
}


6 add modal twig to layout folder _modal.html.twig
<div
        class="modal fade"
        tabindex="-1"
        aria-hidden="true"
        data-{{ stimulusControllerPrefix }}-target="modal"
>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">{{ modalTitle }}</h5>
                <button type="button" class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div
                    class="modal-body text-left"
                    data-modal-form-target="modalBody"
                    data-action="submit->modal-form#submit"
            >
                {{ modalContent|default('Loading...') }}
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary"
                        data-bs-dismiss="modal">{{ declineText|trans() }}
                </button>
                <button type="button" class="btn btn-primary" data-action="{{ stimulusControllerPrefix }}#submit">
                    {{ submitText|trans()  }}
                </button>
            </div>
        </div>
    </div>
</div>
{% block javascripts %}
    {{ encore_entry_script_tags('app') }}
{% endblock %}

7. Add AppController and LiveComponentFormController
8.Add live component rout to routes.yml:
live_component_app:
    path: /app/_components/{_live_component}/{_live_action}
    defaults:
        _live_action: 'get'
